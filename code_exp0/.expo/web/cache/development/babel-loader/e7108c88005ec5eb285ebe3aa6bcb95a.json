{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Demo from \"./Demo\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      count = _useState2[0],\n      setCount = _useState2[1];\n\n  function buttonPressed() {\n    console.log(\"You pressed me ouch!!!\");\n    setCount(count + 1);\n  }\n\n  function resetPressed() {\n    setCount(0);\n  }\n\n  function renderEncouragingText() {\n    if (count >= 10) {\n      return \"Keep Going!\";\n    }\n  }\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      children: count\n    }), _jsx(TouchableOpacity, {\n      style: styles.button,\n      onPress: buttonPressed,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Press me!\"\n      })\n    }), _jsx(TouchableOpacity, {\n      style: styles.button,\n      onPress: resetPressed,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"RESET!\"\n      })\n    }), _jsx(Text, {\n      style: styles.encouragingText,\n      children: renderEncouragingText()\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  encouragingText: {\n    marginTop: 50,\n    color: 'darkgrey'\n  },\n  button: {\n    backgroundColor: \"red\",\n    padding: 20,\n    borderRadius: 10,\n    marginTop: 20\n  },\n  buttonText: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    fontSize: 40\n  }\n});","map":{"version":3,"names":["React","useState","Demo","App","count","setCount","buttonPressed","console","log","resetPressed","renderEncouragingText","styles","container","button","buttonText","encouragingText","StyleSheet","create","flex","justifyContent","alignItems","marginTop","color","backgroundColor","padding","borderRadius","fontWeight","fontSize"],"sources":["/Users/karthik/reactnative/code_exp0/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Text, View, StyleSheet, Button, TouchableOpacity } from 'react-native';\nimport Demo from './Demo';\n\nexport default function App() {\n    // var counter = 0 - this is a regular variable. THIS WILL NOT WORK.\n    // we need to use STATE in order to update counter\n\n    // we are creating a state variable called count. \n    // theres also a fn called setCount which is how we update the count variable\n  let [count, setCount] = useState(0)\n\n  function buttonPressed() {\n      console.log(\"You pressed me ouch!!!\")\n      // counter = counter + 1\n      // console.log(count)\n      setCount(count + 1) // updates count variable w count + 1\n      // in jsx portion below, we can use { } to switch back to JS mode\n      // we are asking js to retrieve the value of count, and put it in the html text\n  }\n  function resetPressed() {\n    setCount(0)\n  }\n  \n  function renderEncouragingText() {\n    if (count >= 10){\n      return \"Keep Going!\"      \n    }\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text>{count}</Text>\n      <TouchableOpacity style={styles.button} onPress = {buttonPressed}>\n        <Text style = {styles.buttonText}>Press me!</Text>\n      </TouchableOpacity> \n      <TouchableOpacity style={styles.button} onPress={resetPressed}>\n        <Text style = {styles.buttonText}>RESET!</Text>\n      </TouchableOpacity>\n      <Text style={styles.encouragingText}>{renderEncouragingText()}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  encouragingText: {\n    marginTop: 50,\n    color: 'darkgrey'\n  },\n  button: {\n    backgroundColor: \"red\",\n    padding: 20,\n    borderRadius: 10,\n    marginTop: 20,\n  },\n  buttonText: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    fontSize: 40,\n  }\n});"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;AAEA,OAAOC,IAAP;;;AAEA,eAAe,SAASC,GAAT,GAAe;EAM5B,gBAAwBF,QAAQ,CAAC,CAAD,CAAhC;EAAA;EAAA,IAAKG,KAAL;EAAA,IAAYC,QAAZ;;EAEA,SAASC,aAAT,GAAyB;IACrBC,OAAO,CAACC,GAAR,CAAY,wBAAZ;IAGAH,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;EAGH;;EACD,SAASK,YAAT,GAAwB;IACtBJ,QAAQ,CAAC,CAAD,CAAR;EACD;;EAED,SAASK,qBAAT,GAAiC;IAC/B,IAAIN,KAAK,IAAI,EAAb,EAAgB;MACd,OAAO,aAAP;IACD;EACF;;EAED,OACE,MAAC,IAAD;IAAM,KAAK,EAAEO,MAAM,CAACC,SAApB;IAAA,WACE,KAAC,IAAD;MAAA,UAAOR;IAAP,EADF,EAEE,KAAC,gBAAD;MAAkB,KAAK,EAAEO,MAAM,CAACE,MAAhC;MAAwC,OAAO,EAAIP,aAAnD;MAAA,UACE,KAAC,IAAD;QAAM,KAAK,EAAIK,MAAM,CAACG,UAAtB;QAAA;MAAA;IADF,EAFF,EAKE,KAAC,gBAAD;MAAkB,KAAK,EAAEH,MAAM,CAACE,MAAhC;MAAwC,OAAO,EAAEJ,YAAjD;MAAA,UACE,KAAC,IAAD;QAAM,KAAK,EAAIE,MAAM,CAACG,UAAtB;QAAA;MAAA;IADF,EALF,EAQE,KAAC,IAAD;MAAM,KAAK,EAAEH,MAAM,CAACI,eAApB;MAAA,UAAsCL,qBAAqB;IAA3D,EARF;EAAA,EADF;AAYD;AAED,IAAMC,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;EAC/BL,SAAS,EAAE;IACTM,IAAI,EAAE,CADG;IAETC,cAAc,EAAE,QAFP;IAGTC,UAAU,EAAE;EAHH,CADoB;EAM/BL,eAAe,EAAE;IACfM,SAAS,EAAE,EADI;IAEfC,KAAK,EAAE;EAFQ,CANc;EAU/BT,MAAM,EAAE;IACNU,eAAe,EAAE,KADX;IAENC,OAAO,EAAE,EAFH;IAGNC,YAAY,EAAE,EAHR;IAINJ,SAAS,EAAE;EAJL,CAVuB;EAgB/BP,UAAU,EAAE;IACVQ,KAAK,EAAE,OADG;IAEVI,UAAU,EAAE,MAFF;IAGVC,QAAQ,EAAE;EAHA;AAhBmB,CAAlB,CAAf"},"metadata":{},"sourceType":"module"}